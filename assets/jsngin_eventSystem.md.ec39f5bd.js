import{_ as s,c as e,o as a,V as n}from"./chunks/framework.9d7713fb.js";const o="/assets/lifeCycleEvent.6006e502.svg",C=JSON.parse('{"title":"eventSystem","description":"","frontmatter":{},"headers":[],"relativePath":"jsngin/eventSystem.md","filePath":"jsngin/eventSystem.md"}'),l={name:"jsngin/eventSystem.md"},t=n('<h1 id="eventsystem" tabindex="-1">eventSystem <a class="header-anchor" href="#eventsystem" aria-label="Permalink to &quot;eventSystem&quot;">​</a></h1><p>jsngin implements a custom event system that is more suited for a game type environment.</p><h2 id="types-of-eventsystems" tabindex="-1">Types of eventSystems <a class="header-anchor" href="#types-of-eventsystems" aria-label="Permalink to &quot;Types of eventSystems&quot;">​</a></h2><ul><li><p><code>local eventSystem</code> This is the eventSystem on each gameObject. Events specific to this gameObject are triggered on this eventSystem. Eg. collision of this gameObject.</p></li><li><p><code>global eventSystem</code> This is the global eventSystem and event at fame/root level are triggered on this eventSystem. Eg. <a href="/jsngin/apiReference/modules.html#loadcompleteevent-1">LoadCompleteEvent</a></p></li></ul><div class="tip custom-block"><p class="custom-block-title">Scripts for global events</p><p>To attach a script to a global event. For the <code>eventName</code> use <code>global_eventName</code>. The export from the script should still be named <code>eventName</code>.</p></div><h2 id="lifecycle-events" tabindex="-1">Lifecycle Events <a class="header-anchor" href="#lifecycle-events" aria-label="Permalink to &quot;Lifecycle Events&quot;">​</a></h2><p>Some basic lifecycle events are defined in the <code>@thejsngin/jsngin</code> implementation. <img src="'+o+`" alt="life cycle events"></p><hr><h3 id="resource-event" tabindex="-1"><code>resource</code> event <a class="header-anchor" href="#resource-event" aria-label="Permalink to &quot;\`resource\` event&quot;">​</a></h3><p>Is a special type of event and the only event, for which the handler&#39;s return value matters. The return value of the resource event is stored as the value for the component inside the gameObject. Incase there are multiple scripts for the resource event, the return values of these scripts must contain a <code>resourceName</code> property, and the final resource is evaluated to be equal to</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">finalResourceForTheComponent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">res0</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">resourceName</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> res0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">res1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">resourceName</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> res1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ... and so on</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>If any of the return values is a promise then the final resouce is computed after all the promises are fullfilled or rejected.</p><h3 id="load-event" tabindex="-1"><code>load</code> event <a class="header-anchor" href="#load-event" aria-label="Permalink to &quot;\`load\` event&quot;">​</a></h3><p>Is fired on every component to initiate the load procedure. Provides <code>addToLoadTracking</code> function to add weighted resources as promises to the loading queue.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Callback</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">LoadEvent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@thejsngin/jsngin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> load</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Callback</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">LoadEvent</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">gameInstance</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">gameObjectInstance</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">componentHelpers</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">addToLoadTracking</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">resolve</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">reject</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">resourcePromise</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">rej</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">resolve</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">reject</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">rej</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">resourceWeight</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">addToLoadTracking</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">resourcePromise</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">resourceWeight</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">random</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.5</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">// triggers \`loadProgress\`</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">reject</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">// triggers \`loadError\`</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5000</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">load</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span></code></pre></div><h3 id="loaderror-event" tabindex="-1"><code>loadError</code> event <a class="header-anchor" href="#loaderror-event" aria-label="Permalink to &quot;\`loadError\` event&quot;">​</a></h3><p>Fired every time a queued resorce fails to load. Provides <code>failLoad</code> which can fail the entire load procedure.</p><h3 id="loadprogress-event" tabindex="-1"><code>loadProgress</code> event <a class="header-anchor" href="#loadprogress-event" aria-label="Permalink to &quot;\`loadProgress\` event&quot;">​</a></h3><p>Fired every time a queued resource loads. Provides <code>failLoad</code> which can fail the entire load procedure.</p><h3 id="loadfailed-event" tabindex="-1"><code>loadFailed</code> event <a class="header-anchor" href="#loadfailed-event" aria-label="Permalink to &quot;\`loadFailed\` event&quot;">​</a></h3><p>Fired if <code>failLoad</code> is called inside <code>loadError</code> or <code>loadProgress</code>. Stops loading and disposes everthing after this is executed.</p><h3 id="loadcomplete-event" tabindex="-1"><code>loadComplete</code> event <a class="header-anchor" href="#loadcomplete-event" aria-label="Permalink to &quot;\`loadComplete\` event&quot;">​</a></h3><p>Fired if all the queued resource promisses have settled and <code>failLoad</code> was not called.</p><h3 id="dispose-event" tabindex="-1"><code>dispose</code> event <a class="header-anchor" href="#dispose-event" aria-label="Permalink to &quot;\`dispose\` event&quot;">​</a></h3><p>Fired before either the component is removed / gameObject is removed.</p>`,25),p=[t];function r(c,i,y,F,d,D){return a(),e("div",null,p)}const A=s(l,[["render",r]]);export{C as __pageData,A as default};
