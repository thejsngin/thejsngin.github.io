import{_ as s,c as a,o as l,V as e}from"./chunks/framework.9d7713fb.js";const o="/assets/walls.83a89345.png",n="/assets/sensor.3775a815.png",A=JSON.parse('{"title":"walls","description":"","frontmatter":{},"headers":[],"relativePath":"pong3d/walls.md","filePath":"pong3d/walls.md"}'),t={name:"pong3d/walls.md"},p=e('<h1 id="walls" tabindex="-1">walls <a class="header-anchor" href="#walls" aria-label="Permalink to &quot;walls&quot;">​</a></h1><p>At this point the game is almost playable. We just need to ensure that the puck going out of bounds resets the game.</p><h2 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-label="Permalink to &quot;Setup&quot;">​</a></h2><ol><li><p>Duplicate any of the wall.</p></li><li><p>Remove the mesh component from this wall gameObject so that there is no visible mesh, We only need the collider.</p></li><li><p>Position and scale it so that it is behind any of the paddle. <img src="'+o+'" alt="wall"></p></li><li><p>On the collider component of this wall gameObject, enable <code>Sensor</code> and <code>enable-COLLISION_EVENTS</code>. <img src="'+n+`" alt="sensor"></p></li></ol><p>Making the collider a sensor ensures that the collider does not actually create reaction forces and enabling the COLLISION_EVENTS allows us to listen for these events.</p><h2 id="logic" tabindex="-1">Logic <a class="header-anchor" href="#logic" aria-label="Permalink to &quot;Logic&quot;">​</a></h2><p>Add the logic to <code>&lt;projectDir&gt;/src/scripts/wall.ts</code></p><div class="language-TypeScript"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// fired because of the collider component</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> collisionEvent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">game</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">gameObject</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;font-style:italic;">props</span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">c1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">c2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">entering</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">entering</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">game</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">currentGameObject</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">puck</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">components</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">rigidBody</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setTranslation</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> y</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> z</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Add this script to the wall gameObject and duplicate this gameObject for the other paddle.</p><p>At this point the game should be playable.</p><h2 id="challenge" tabindex="-1">Challenge <a class="header-anchor" href="#challenge" aria-label="Permalink to &quot;Challenge&quot;">​</a></h2><p>Setup a way to track score.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Refer to <a href="https://github.com/thejsngin/pong3d" target="_blank" rel="noreferrer">completed project thejsngin/pong3d</a>. If you want a hint.</p></div>`,13),c=[p];function r(i,y,D,F,h,d){return l(),a("div",null,c)}const g=s(t,[["render",r]]);export{A as __pageData,g as default};
