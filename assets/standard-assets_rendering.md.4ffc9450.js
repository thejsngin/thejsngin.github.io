import{_ as e,c as a,o as t,V as r}from"./chunks/framework.9d7713fb.js";const _=JSON.parse('{"title":"Rendering","description":"","frontmatter":{},"headers":[],"relativePath":"standard-assets/rendering.md","filePath":"standard-assets/rendering.md"}'),s={name:"standard-assets/rendering.md"},n=r('<h1 id="rendering" tabindex="-1">Rendering <a class="header-anchor" href="#rendering" aria-label="Permalink to &quot;Rendering&quot;">â€‹</a></h1><p><code>thejsngin/standard-asseets</code> build a wrapper over <a href="https://threejs.org/" target="_blank" rel="noreferrer">three.js</a> for rendering. Constructs provided:</p><ul><li><p><a href="/standard-assets/apiReference/modules/renderer_type"><code>renderer</code></a> Is a three.js webgl renderer, only one renderer component is needed in the level(root gameObjectInstance). Provides events relating to rendering.</p></li><li><p><a href="/standard-assets/apiReference/modules/scene_type"><code>scene</code></a> Is the actual scene in wihich all the to be rendered entities are placed. Only one scene component is needed in the level(root gameObjectInstance). Creates an instance of three.js scene.</p></li><li><p><a href="/standard-assets/apiReference/modules/camera_type"><code>camera</code></a> The camera through which the world is view. Atleast one camera component is required in the level(root gameObjectInstance) for rendering to work.</p></li><li><p><a href="/standard-assets/apiReference/modules/transform_type"><code>transform</code></a> Responsible for controlling the gameObjects position, rotation and scale. Atmax one shloud be used per gameObject. Creates an instance of Three.js group.</p></li><li><p><a href="/standard-assets/apiReference/modules/geometry_type"><code>geometry</code></a> Responsible for the shape of the mesh. Creates an instance of Three.js geometry.</p></li><li><p><a href="/standard-assets/apiReference/modules/material_type"><code>material</code></a> Responsible for the material of the mesh. Creates an instance of Three.js material.</p></li><li><p><a href="/standard-assets/apiReference/modules/mesh_type"><code>mesh</code></a> Joins geometry and material to create a Three.js mesh object and adds it to the transform/scene.</p></li><li><p><a href="/standard-assets/apiReference/modules/model_type"><code>model</code></a> Loads a .glb model and adds it to the transform/scene.</p></li><li><p><a href="/standard-assets/apiReference/modules/light_type"><code>light</code></a> Creates a light and adds it to the transform/scene. Creates an instance of Three.js light.</p></li></ul>',3),o=[n];function d(i,c,l,h,p,m){return t(),a("div",null,o)}const g=e(s,[["render",d]]);export{_ as __pageData,g as default};
