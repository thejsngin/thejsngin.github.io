import{_ as e,c as a,o as t,V as n}from"./chunks/framework.9d7713fb.js";const b=JSON.parse('{"title":"jsngin","description":"","frontmatter":{},"headers":[],"relativePath":"jsngin/constructs.md","filePath":"jsngin/constructs.md"}'),o={name:"jsngin/constructs.md"},s=n('<h1 id="jsngin" tabindex="-1">jsngin <a class="header-anchor" href="#jsngin" aria-label="Permalink to &quot;jsngin&quot;">​</a></h1><p><a href="https://www.npmjs.com/package/@thejsngin/jsngin" target="_blank" rel="noreferrer">@thejsngin/jsngin</a> is the core library that implements the constructs upon which the game is built. Eg. the game, gameInstance, gameObject, component are all modeled in <code>@thejsngin/jsngin</code>.</p><h2 id="lets-look-at-some-basic-constructs" tabindex="-1">Lets look at some basic constructs <a class="header-anchor" href="#lets-look-at-some-basic-constructs" aria-label="Permalink to &quot;Lets look at some basic constructs&quot;">​</a></h2><h3 id="component" tabindex="-1">component <a class="header-anchor" href="#component" aria-label="Permalink to &quot;component&quot;">​</a></h3><p>components are responsible for providing behaviour to gameObjects. Eg. a light component would make the gameObject act as a light, further more a transform component would help define a position, rotation and scale for this gameObject.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>components also define the inEngine functionality. This includes everything from what properties are to be displayed in the component editor to what 3d visuvalizations are shown.</p></div><h3 id="gameobject" tabindex="-1">gameObject <a class="header-anchor" href="#gameobject" aria-label="Permalink to &quot;gameObject&quot;">​</a></h3><p>gameObjects act as a container for components and other gameObjects. Eg. a player can be a gameObject containing components like transform and mesh and other children gameObjects like weapons, a camera (that follows it) etc.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>jsngin does not provide a separate construct for levels(or scenes). A gameObject with no parent can be instanciated as the root and acts as the level.</p></div><h3 id="game" tabindex="-1">game <a class="header-anchor" href="#game" aria-label="Permalink to &quot;game&quot;">​</a></h3><p>game helps in creating a running game instance by loading a gameObject as root (or level) and providing load updated.</p>',11),c=[s];function i(r,l,m,h,d,p){return t(),a("div",null,c)}const u=e(o,[["render",i]]);export{b as __pageData,u as default};
